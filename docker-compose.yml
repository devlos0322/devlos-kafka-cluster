# 서비스용 인프라 구축
version: '3'

############# Zookeeper cluster #############
services:
  zookeeper-1:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-1
    user: root
    ports:
      - "2181:2181" #클라이언트 연결을 감지하는 포트
      - "2888"      # 클러스터간 동기화를 위한 포트
      - "3888"      # Leader를 선출하기 위한 포트
    environment:
      ZOOKEEPER_SERVER_ID: 1
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888  
    volumes:
      - ./logs/log-zookeeper-1:/var/log/kafka  
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure
  
  zookeeper-2:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-2
    user: root
    ports:
      - "2182:2182"
      - "2888"
      - "3888"
    environment:
      ZOOKEEPER_SERVER_ID: 2
      ZOOKEEPER_CLIENT_PORT: 2182
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888
    volumes:
      - ./logs/log-zookeeper-2:/var/log/kafka  
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure

  zookeeper-3:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper-3
    user: root
    ports:
      - "2183:2183"
      - "2888"
      - "3888"
    environment:
      ZOOKEEPER_SERVER_ID: 3
      ZOOKEEPER_CLIENT_PORT: 2183
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVERS: zookeeper-1:2888:3888;zookeeper-2:2888:3888;zookeeper-3:2888:3888  
    volumes:
      - ./logs/log-zookeeper-3:/var/log/kafka
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure

############# kafka cluster #############

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1
    user: root
    hostname: kafka-1
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 9091:9091
      - 29091:29091
      - 9991:9991
    #mem_limit: "2g"
    environment: 
      KAFKA_BROKER_ID: 1  # 브로커 아이디 지정
      KAFKA_ZOOKEEPER_CONNECT:  zookeeper-1:2181,zookeeper-2:2182,zookeeper-3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-1:29091,PLAINTEXT_HOST://"${SERVER_URI}":9091 # 두 포트를 다르게 설정해야함(이유: TBD)
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"  # 토픽 자동 생성 해제(운영 환경)
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9991
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'  # Page cache 용 메모리 할당  
    volumes:
      - ./logs/log-kafka-1:/var/log/kafka
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure

  kafka-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-2
    user: root
    hostname: kafka-2
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 9191:9191
      - 29191:29191
      - 9992:9992
    #mem_limit: "2g"
    environment: 
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT:  zookeeper-1:2181,zookeeper-2:2182,zookeeper-3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-2:29191,PLAINTEXT_HOST://"${SERVER_URI}":9191
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3
      KAFKA_JMX_PORT: 9992
      CONFLUENT_METRICS_ENABLE: 'false'
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'  
    volumes:
      - ./logs/log-kafka-2:/var/log/kafka
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure

  kafka-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-3
    user: root
    hostname: kafka-3
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
    ports:
      - 9291:9291
      - 29291:29291
      - 9993:9993
    #mem_limit: "2g"
    environment: 
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT:  zookeeper-1:2181,zookeeper-2:2182,zookeeper-3:2183
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka-3:29291,PLAINTEXT_HOST://"${SERVER_URI}":9291
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 3
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 3  
      KAFKA_JMX_PORT: 9993
      CONFLUENT_METRICS_ENABLE: "false"
      KAFKA_HEAP_OPTS: '-Xmx512M -Xms512M'  
    volumes:
      - ./logs/log-kafka-3:/var/log/kafka
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure

############# kafka matric output via jmx #############

  jmx-kafka-1:
    image: "sscaling/jmx-prometheus-exporter"
    container_name: jmx-kafka-1
    user: root
    ports:
    - "5556"
    depends_on:
    - kafka-1
    environment:
      CONFIG_YML : "/etc/jmx_exporter/config.yml"
      JVM_OPTS: "-Xmx512M"
    volumes:
    - ./etc/jmx_exporter/config_kafka_1.yml:/etc/jmx_exporter/config.yml  
    logging:
      options:
        max-size: "10m"
    restart: on-failure

  jmx-kafka-2:
    image: "sscaling/jmx-prometheus-exporter"
    container_name: jmx-kafka-2
    user: root
    ports:
    - "5556"
    depends_on:
    - kafka-2
    environment:
      CONFIG_YML : "/etc/jmx_exporter/config.yml"
      JVM_OPTS: "-Xmx512M"
    volumes:
    - ./etc/jmx_exporter/config_kafka_2.yml:/etc/jmx_exporter/config.yml  
    logging:
      options:
        max-size: "10m"
    restart: on-failure
      
  jmx-kafka-3:
    image: "sscaling/jmx-prometheus-exporter"
    container_name: jmx-kafka-3
    user: root
    ports:
    - "5556"
    depends_on:
    - kafka-3
    environment:
      CONFIG_YML : "/etc/jmx_exporter/config.yml"
      JVM_OPTS: "-Xmx512M"
    volumes:
    - ./etc/jmx_exporter/config_kafka_3.yml:/etc/jmx_exporter/config.yml  
    logging:
      options:
        max-size: "10m"
    restart: on-failure

 ############# prometeus 매트릭 전달 #############
 # kafka(JMX) -> prometeus -> grafana

  prometheus:
    image: "prom/prometheus"
    container_name: prometheus
    user: root
    ports:
     - "9090:9090"
    depends_on:
    - jmx-kafka-1
    - jmx-kafka-2
    - jmx-kafka-3
    volumes:
     - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml     
     - ./data/prometheus/data:/prometheus/data     
    command: "--config.file=/etc/prometheus/prometheus.yml"
    restart: on-failure

 ############# grafana 매트릭 수집 #############

  grafana:
    image: "grafana/grafana"
    container_name: grafana
    user: root
    ports:
     - "3000:3000"
    depends_on:
     - prometheus
    environment:
      GF_PATHS_DATA : /var/lib/grafana
      GF_SECURITY_ADMIN_USER : "${ID}"
      GF_SECURITY_ADMIN_PASSWORD : "${PW}"
    volumes:
     - ./etc/grafana/provisioning:/etc/grafana/provisioning
     - ./etc/grafana/dashboards:/var/lib/grafana/dashboards  
    restart: on-failure

 ############# CMAC Manager #############
    
  kafka_manager:
    image: hlebalbau/kafka-manager:stable
    container_name: cmac
    user: root
    ports:
      - 9100:9000
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3
      - kafka-1
      - kafka-2
      - kafka-3
    environment:
      ZK_HOSTS: zookeeper-1:2181,zookeeper-2:2182,zookeeper-3:2183
      APPLICATION_SECRET: "random-secret"
      KAFKA_MANAGER_AUTH_ENABLED: "true"
      KAFKA_MANAGER_USERNAME: "${ID}"
      KAFKA_MANAGER_PASSWORD: "${PW}"  
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure

 ############# Kowl Manager #############

  kowl:
    image: quay.io/cloudhut/kowl:v1.4.0
    hostname: kowl
    user: root
    volumes:
      - ./etc/kowl/config.yaml:/etc/kowl/config.yaml
    ports:
      - "9200:8080"
    container_name: kowl
    entrypoint: ./kowl --config.filepath=/etc/kowl/config.yaml
    depends_on:
      - zookeeper-1
      - zookeeper-2
      - zookeeper-3 
      - kafka-1
      - kafka-2
      - kafka-3  
    logging:
      driver: "json-file"
      options:
        max-file: "4"
        max-size: "10m"
    restart: on-failure